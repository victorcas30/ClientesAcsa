@page "/agregarcliente"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager // Agrega la inyección de NavigationManager
@using System.Net.Http.Json
@using System.Threading.Tasks
@using System.Net.Http.Headers
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@using System.Globalization



<h3>Agregar Cliente</h3>

<form @onsubmit="AgregarClienteAsync">
    <div class="form-group">
        <label for="primerNombre">Primer Nombre:</label>
        <input type="text" class="form-control" id="primerNombre" @bind="cliente.primerNombre">
    </div>
    <div class="form-group">
        <label for="segundoNombre">Segundo Nombre:</label>
        <input type="text" class="form-control" id="segundoNombre" @bind="cliente.segundoNombre">
    </div>
    <div class="form-group">
        <label for="primerApellido">Primer Apellido:</label>
        <input type="text" class="form-control" id="primerApellido" @bind="cliente.primerApellido">
    </div>
    <div class="form-group">
        <label for="segundoApellido">Segundo Apellido:</label>
        <input type="text" class="form-control" id="segundoApellido" @bind="cliente.segundoApellido">
    </div>
    <div class="form-group">
        <label for="dui">DUI:</label>
        <input type="text" class="form-control" id="dui" @bind="cliente.dui">
    </div>
    <div class="form-group">
        <label for="nit">NIT:</label>
        <input type="text" class="form-control" id="nit" @bind="cliente.nit">
    </div>
    <div class="form-group">
        <label for="fechaNacimiento">Fecha de Nacimiento:</label>
        <input type="date" class="form-control" id="fechaNacimiento" @bind="cliente.fechaNacimiento">
    </div>
    <div class="form-group">
        <label for="direccion">Dirección:</label>
        <input type="text" class="form-control" id="direccion" @bind="cliente.direccion">
    </div>
    <br />
    <button type="submit" class="btn btn-success">Agregar Cliente</button>
</form>

@code {
    private Cliente cliente = new Cliente
        {
            fechaNacimiento = DateTime.Now
        };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Obtener el token de localStorage
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "accessToken");

            if (string.IsNullOrEmpty(token))
            {
                Console.WriteLine("Debes obtener un token primero.");
                return;
            }

            // Configurar el encabezado de autorización con el token
            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
        }
    }

    private async Task AgregarClienteAsync()
    {
        try
        {
            // Formatear manualmente la fecha en el formato deseado (sin la "Z" al final)
            string fechaFormateada = cliente.fechaNacimiento.ToString("yyyy-MM-ddTHH:mm:ss");

            // Asignar la fecha formateada directamente al objeto cliente existente
            cliente.fechaNacimiento = DateTime.ParseExact(fechaFormateada, "yyyy-MM-ddTHH:mm:ss", CultureInfo.InvariantCulture);


            Console.WriteLine("Contenido del objeto cliente:");
            Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(cliente));
            // Realizar una solicitud HTTP POST para agregar un cliente
            //var response = await HttpClient.PostAsJsonAsync("https://devgestionesservice.devacsa.com/Test/CrearDatosCliente", cliente);
            var response = await HttpClient.PostAsJsonAsync("http://localhost:8000/api/clientes", cliente);

            if (response.IsSuccessStatusCode)
            {
                // El cliente se ha agregado correctamente, redirigir al usuario a la página de clientes
                NavigationManager.NavigateTo("/clientes");
                Console.WriteLine("El cliente se ha agregado correctamente");
            }
            else
            {
                // Manejar el caso en el que la solicitud no fue exitosa
                Console.WriteLine("Error al agregar el cliente. Código de estado: " + (int)response.StatusCode);
            }
        }
        catch (Exception ex)
        {
            // Manejar errores de la solicitud HTTP
            Console.WriteLine("Error: " + ex.Message);
        }
    }



    public class Cliente
    {
        //public int idCliente { get; set; }
        public string primerNombre { get; set; }
        public string segundoNombre { get; set; }
        public string primerApellido { get; set; }
        public string segundoApellido { get; set; }
        public string dui { get; set; }
        public string nit { get; set; }
        public DateTime fechaNacimiento { get; set; }
        public string direccion { get; set; }
        public int idCiudad { get; set; }
        public int primeraCuota { get; set; }
    }
}

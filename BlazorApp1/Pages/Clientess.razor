@page "/clientess"
@inject HttpClient HttpClient
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using System.Collections.Generic
@using System.Threading.Tasks
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@using System.Text.Json
@using System.Text.Json.Serialization;
@using System.Globalization;


<h3>Clientes</h3>

@if (string.IsNullOrEmpty(token))
{
    <h4>Autenticación</h4>
    <form @onsubmit="Autenticar">
        <div class="mb-3">
            <label for="username" class="form-label">Nombre de usuario:</label>
            <input type="text" class="form-control" id="username" @bind="username">
        </div>
        <div class="mb-3">
            <label for="password" class="form-label">Contraseña:</label>
            <input type="password" class="form-control" id="password" @bind="password">
        </div>
        <button type="submit" class="btn btn-primary">Iniciar sesión</button>
    </form>
}
else
{
    <button class="btn btn-primary" @onclick="ObtenerDatosClientes">Obtener Datos de Clientes</button>

    @if (clientes != null && clientes.Count > 0)
    {
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>DUI</th>
                    <th>NIT</th>
                    <th>Fecha de Nacimiento</th>
                    <th>Dirección</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var cliente in clientes)
                {
                    <tr>
                        <td>@cliente.NombreCompleto</td>
                        <td>@cliente.DUI</td>
                        <td>@cliente.NIT</td>
                        <td>@cliente.FechaNacimiento.ToString("yyyy-MM-dd")</td>
                        <td>@cliente.Direccion</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No hay datos de clientes disponibles.</p>
    }

}

@code {
    private string username;
    private string password;
    private string token;
    private List<Cliente> clientes;

    private async Task Autenticar()
    {
        try
        {
            var request = new { username, password };
            var response = await HttpClient.PostAsJsonAsync("https://authenticate.serviciosacsa.com/Authenticate/GetAccessToken", request);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();

                // Deserializa el objeto JSON para obtener el token de acceso
                var responseObject = JsonSerializer.Deserialize<Dictionary<string, string>>(responseContent);

                if (responseObject.TryGetValue("access_token", out var accessToken))
                {
                    token = accessToken;
                    Console.WriteLine("Token de acceso obtenido: " + token);

                    // Almacena el token en localStorage usando IJSRuntime
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "accessToken", token);
                }
                else
                {
                    Console.WriteLine("No se pudo encontrar el token de acceso en la respuesta JSON.");
                }
            }
            else
            {
                Console.WriteLine("Error al autenticarse. Verifica las credenciales.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
        }
    }

    private async Task ObtenerDatosClientes()
    {
        // Obtener el token de localStorage
        token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "accessToken");

        if (string.IsNullOrEmpty(token))
        {
            Console.WriteLine("Debes obtener un token primero.");
            return;
        }

        try
        {
            // Agregar el token a la cabecera de autorización
            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            // Realizar una solicitud HTTP para obtener datos de clientes
            var response = await HttpClient.GetAsync("https://devgestionesservice.devacsa.com/Test/ObtenerDatosClientes");
            response.EnsureSuccessStatusCode(); // Asegura que la respuesta sea exitosa

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();

                // Deserializa el objeto JSON como una lista de objetos Cliente
                clientes = JsonSerializer.Deserialize<List<Cliente>>(responseContent);
                Console.WriteLine("Datos de clientes obtenidos: " + clientes.Count);

                // Notificar a la aplicación que debe actualizar la interfaz de usuario
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("Error al obtener datos de clientes. Código de estado: " + (int)response.StatusCode);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
        }
    }

    public class CustomDateTimeConverter : JsonConverter<DateTime>
    {
        public override DateTime Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            if (reader.TokenType == JsonTokenType.String)
            {
                if (DateTime.TryParseExact(reader.GetString(), "yyyy-MM-ddTHH:mm:ss.fffZ", CultureInfo.InvariantCulture, DateTimeStyles.AssumeUniversal, out var date))
                {
                    return date;
                }
            }

            return DateTime.MinValue; // Valor predeterminado en caso de error
        }

        public override void Write(Utf8JsonWriter writer, DateTime value, JsonSerializerOptions options)
        {
            writer.WriteStringValue(value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ"));
        }
    }




    public class Cliente
    {
        [JsonPropertyName("idCliente")]
        public int IdCliente { get; set; }

        [JsonPropertyName("nombreCompleto")]
        public string NombreCompleto { get; set; }

        [JsonPropertyName("dui")]
        public string DUI { get; set; }

        [JsonPropertyName("nit")]
        public string NIT { get; set; }

        [JsonPropertyName("fechaNacimiento")]
        [JsonConverter(typeof(CustomDateTimeConverter))] // Aplicar el convertidor personalizado aquí
        public DateTime FechaNacimiento { get; set; }

        [JsonPropertyName("direccion")]
        public string Direccion { get; set; }

    }

}

@page "/clientes"
@inject HttpClient HttpClient
@using System.Net.Http.Json
@using System.Collections.Generic
@using System.Threading.Tasks
@using System.Text.Json;
@using System.Globalization;
@using System.Text.Json.Serialization;
@using System.Net.Http.Headers
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<h3>Clientes</h3>
<button class="btn btn-success" @onclick="IrAgregaraCliente">
    <span class="bi bi-plus"></span> Agregar Cliente
</button>

<br />
<br />


@if (clientes != null && clientes.Count > 0)
{
    <div class="table-responsive">
        <table class="table table-striped table-bordered table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Nombre</th>
                    <th>DUI</th>
                    <th>NIT</th>
                    <th>Fecha de Nacimiento</th>
                    <th>Dirección</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var cliente in clientes)
                {
                    <tr>
                        <td><span class="small">@cliente.NombreCompleto</span></td>
                        <td><span class="small">@cliente.DUI</span></td>
                        <td><span class="small">@cliente.NIT</span></td>
                        <td><span class="small">@cliente.FechaNacimiento?.ToString("yyyy-MM-dd")</span></td>
                        <td><span class="small">@cliente.Direccion</span></td>
                        <td>
                            <a href="/editarcliente/@cliente.IdCliente" class="btn btn-primary btn-sm">Editar</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <p>No hay datos de clientes disponibles.</p>
}

@code {
    private List<Cliente> clientes;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Obtener el token de localStorage
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "accessToken");

            if (string.IsNullOrEmpty(token))
            {
                Console.WriteLine("Debes obtener un token primero.");
                return;
            }

            // Configurar el encabezado de autorización con el token
            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            // Realizar una solicitud HTTP para obtener datos de clientes
            //var response = await HttpClient.GetAsync("https://devgestionesservice.devacsa.com/Test/ObtenerDatosClientes");
            var response = await HttpClient.GetAsync("http://localhost:8000/api/clientes");

            response.EnsureSuccessStatusCode(); // Asegura que la respuesta sea exitosa

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();

                // Deserializa el objeto JSON como una lista de objetos Cliente
                clientes = JsonSerializer.Deserialize<List<Cliente>>(responseContent);
                Console.WriteLine("Datos de clientes obtenidos: " + clientes.Count);

                // Notificar a la aplicación que debe actualizar la interfaz de usuario
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("Error al obtener datos de clientes. Código de estado: " + (int)response.StatusCode);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
        }
    }

    public class Cliente
    {
        [JsonPropertyName("idCliente")]
        public int IdCliente { get; set; }

        [JsonPropertyName("nombreCompleto")]
        public string NombreCompleto { get; set; }

        [JsonPropertyName("dui")]
        public string DUI { get; set; }

        [JsonPropertyName("nit")]
        public string NIT { get; set; }

        [JsonPropertyName("fechaNacimiento")]
        public DateTime? FechaNacimiento { get; set; } // Usar DateTime? para permitir valores nulos

        [JsonPropertyName("direccion")]
        public string Direccion { get; set; }
    }

    private void IrAgregaraCliente()
    {
        // Utiliza NavigationManager.NavigateTo para redirigir al usuario a la página de agregar cliente
        NavigationManager.NavigateTo("/agregarcliente");
    }
}
